{
  "datasource": {
    "type": "influxdb",
    "uid": "s5Noghq4k"
  },
  "fieldConfig": {
    "defaults": {
      "custom": {
        "drawStyle": "line",
        "lineInterpolation": "smooth",
        "barAlignment": 0,
        "lineWidth": 1,
        "fillOpacity": 0,
        "gradientMode": "none",
        "spanNulls": false,
        "showPoints": "auto",
        "pointSize": 5,
        "stacking": {
          "mode": "none",
          "group": "A"
        },
        "axisPlacement": "auto",
        "axisLabel": "",
        "axisColorMode": "text",
        "scaleDistribution": {
          "type": "linear"
        },
        "axisCenteredZero": false,
        "hideFrom": {
          "tooltip": false,
          "viz": false,
          "legend": false
        },
        "thresholdsStyle": {
          "mode": "off"
        }
      },
      "color": {
        "mode": "palette-classic"
      },
      "mappings": [],
      "thresholds": {
        "mode": "absolute",
        "steps": [
          {
            "color": "green",
            "value": null
          },
          {
            "color": "red",
            "value": 80
          }
        ]
      }
    },
    "overrides": []
  },
  "gridPos": {
    "h": 12,
    "w": 24,
    "x": 0,
    "y": 0
  },
  "id": 4,
  "options": {
    "tooltip": {
      "mode": "single",
      "sort": "none"
    },
    "legend": {
      "showLegend": true,
      "displayMode": "list",
      "placement": "right",
      "calcs": [],
      "width": 500
    }
  },
  "pluginVersion": "9.4.7",
  "targets": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "s5Noghq4k"
      },
      "query": "import \"strings\"\n\nwindowPeriod = 15m\n\nvalueStream = from(bucket: \"redstone\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"dataPackages\" and r.dataServiceId == \"${dataServiceId}\" and r.dataFeedId == \"${dataFeedId}\" and r[\"_field\"] == \"value\")\n  |> aggregateWindow(every: windowPeriod, fn: mean, createEmpty: false)\n\nsourcesStream = from(bucket: \"redstone\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"dataPackages\" and r.dataServiceId == \"${dataServiceId}\" and r.dataFeedId == \"${dataFeedId}\")\n  |> filter(fn: (r) => strings.hasPrefix(v: r[\"_field\"], prefix: \"value\"))\n  |> aggregateWindow(every: windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({ r with sourceField: r[\"_field\"] }))\n\njoined = join(\n  tables: {v: valueStream, s: sourcesStream},\n  on: [\"_time\", \"dataServiceId\", \"dataFeedId\"]\n)\n\njoined\n  |> map(fn: (r) => ({\n      _time: r._time,\n      deviationPercentage: (r._value_s - r._value_v) / r._value_v * 100.0,\n      sourceField: r.sourceField\n  }))\n  |> group(columns: [\"sourceField\"])\n  |> yield(name: \"deviationPercentage\")\n",
      "refId": "A"
    }
  ],
  "title": "Deviation from aggregated value (v1)",
  "transformations": [],
  "type": "timeseries"
}